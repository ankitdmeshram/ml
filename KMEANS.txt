import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
# Given dataset
data = np.array([[0.1, 0.6], [0.15, 0.71], [0.08, 0.9], [0.16, 0.85], [0.2, 0.3], [0.25, 0.5], [0.24, 0.1], [0.3, 0.2]])
print("Collection of 8 points=", data)
print("\n")
# Initial centroids
m1 = np.array([0.1, 0.6])  # P1
m2 = np.array([0.3, 0.2])  # P8
centroids = np.array([m1, m2]) 
print("Initial centroids=", centroids)
print("\n")
# Number of clusters (2)
# Initializing K-Means with custom centroids
kmeans_cluster = KMeans(n_clusters=2, init=centroids, n_init=1, random_state=20)
#n_clusters=no. of cluster, init=center points (‘random’ for randomly choosing centroids)
#n_init=no. of iteration (algorithm run)
kmeans_cluster.fit(data)
# Getting the cluster labels
labels= kmeans_cluster.labels_
print("Cluster's Label:", np.unique(labels))
print("\n")
# a) Which cluster does P6 belong to?
print("a) P6 belongs to Cluster=", labels[5])
print("\n")
# b) What is the population of the cluster around m2?
population = np.sum(labels== 1)
print("b) The population of the cluster around m2 is =", population)
print("\n")
# c) What is updated value of m1 and m2?
updated_m1 = kmeans_cluster.cluster_centers_[0]
updated_m2 = kmeans_cluster.cluster_centers_[1]
print("c) Updated value of m1 (Cluster 1):", updated_m1)
print("   Updated value of m2 (Cluster 2):", updated_m2)
print("\n")
updated_centroid=np.array([updated_m1, updated_m2])
# Plotting the clusters
plt.scatter(data[:, 0], data[:, 1], c=labels)
plt.scatter(centroids[:,0], centroids[:,1], c='red', marker='*', s=200, label='Initial Centroids')
plt.scatter(updated_centroid[:,0], updated_centroid[:,1], marker='*', s=200, label='Updated Centroid')
plt.title('K-Means Clustering')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.show()
